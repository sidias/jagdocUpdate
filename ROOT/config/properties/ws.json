{
	"sections": [
		{
			"title": "Members",
			"columns": ["Member", "Type", "Description"],
			"rows": [
				{
					"Member": "EventListener onreadystatechange ",
					"Type": "EventListener",
					"Description": "This property can be set to a function object, which is invoked when the state of an asynchronous request changes (e.g. the request completes). "
				}, {
					"Member": "readyState ",
					"Type": "Unsigned Short",
					"Description": "The current state of the object, which can be one of the following values: <br><br> <ul> <li>0: The object has not been initialized by calling the open() method. </li> <li>1: The object has been initialized successfully, but the send() method has not been called. </li> <li>2: The request is pending</li> <li>3: The request is partially complete (some data has been received, and may be available in the responseText property. </li> <li>4: The request is complete, all data has been received. <br><br> Of these, typically only the last (readyState == 4) is used. </li> </ul> "
				}, {
					"Member": "responseXML",
					"Type": "Document",
					"Description": "The parsed XML message representing the response from the service. (Currently this is same as responseE4X, but this will be fixed to return a DOM document in the future versions) "
				}, {
					"Member": "responseE4X </code>* ",
					"Type": "XML",
					"Description": "The parsed E4X XML message representing the response from the service."
				}, {
					"Member": "responseText",
					"Type": "String",
					"Description": "The raw text representing the XML (or non-XML) response. If the responseXML property is empty, you can check the responseText property to see if a non-XML response was received. "
				}, {
					"Member": "error ",
					"Type": "WebService Error",
					"Description": "When an asynchronous operation failed to complete successfully (including internal errors, or protocol errors such as SOAP faults) the error property is a WebServiceError object "
				}
			]
		}, {
			"title": "Operations",
			"columns": ["Operation", "Returns", "Description"],
			"rows": [
				{
					"Operation": "open ( object options | String httpMethod, String url [, Boolean async [, String username [, String password]]])",
					"Returns": "None",
					"Description": "This method prepares the WSRequest object to invoke a Web service. It accepts the following parameters: <br><br> <ul> <li><em>options (array)</em>: an array of options for formulating the message. These options correspond to the message framing required by the service as documented in the service's WSDL and/or documentation. </li> </ul> The following is a list of supported options <ul> <li>useSOAP - Specify the SOAP version to be used or whether not to use SOAP. Supported values are \"1.1\" | \"1.2\" | \"false\" </li> <li>HTTPMethod - The HTTP method to be used. Supported values are \"GET\" | \"POST\" | \"PUT\" | \"DELETE\" </li> <li>useWSA - Weather WS-Addressing needs to be used. Supported values are \"1.0\" | \"submission\" | \"true\". If the version of WS-Addressing is specified and useWSA is set to true the \"1.0\" version is used. </li> </ul> When WS-Addressing is been used the following options will also be processed <ul> <li>action - Will be used as the wsa:to value. Can be used to specify to address that the message will be sent to. </li> <li>from - Will be used as the wsa:from value. Can be used to specify the address the request was sent from. </li> <li>replyTo - Will be used as the wsa:replyTo value. Can be used to specify the address the response should be sent to. </li> <li>faultTo - Will be used as the wsa:faultTo value. Can be used to specify the address a fault should be sent to. </li> </ul> <ul> <li>action - If useWSA is false will be used as the SOAPAction. </li> <li>mep - Allows you to control the Message Exchange Pattern for an invocation. Supported values are in-only (need to send a request and do not care about the response) and in-out (request - response). Defaults to in-out. </li> <li>username - This will be used as the username to invoke the service with HTTP Basic Authentication enabled. </li> <li>password - This will be used as the password to invoke the service with HTTP Basic Authentication enabled. </li> <li>HTTPLocation - Used to specify the URL pattern of the operation been invoked. Refer http://wso2.org/library/3715 for details. </li> <li>HTTPLocationIgnoreUncited - Specifies weather parameters not cited in the HTTPLocation should be ignored. </li> <li>HTTPQueryParameterSeparator - Specifies the query parameter seperator to be used. Defaults to &amp;. </li> <li>HTTPInputSerialization - Specifies the message format of the request. The Mashup Server can be extended to support custom serialization. The following are supported by this distribution. application/x-www-form-urlencoded, multipart/form-data, application/json, application/json/badgerfish, application/soap+xml, text/xml, application/xml </li> <li>HTTPContentEncoding - Used to speficy the content-encoding of the request. Supported values are \"gzip\" | \"compress\" </li> <li>rampart - This property is used to specify rampart configurations for to be used with the service policies. The object pointed by \"rampart\" key should be in the following format. <pre class=\"prettyprint\">{\n\t\tuser: \"admin\", //username for to use UT and other scenarios\n\t\tuserPassword: \"admin\", //in UT, this is the user password, else private key\n\t\tkeyPassword: \"client\",\n\t\tuserCertAlias: \"client\",\n\t\tstsAlias: \"sts\",\n\t\tencryptionUser: \"server\",\n\t\ttimestampTTL: \"10000\",\n\t\ttimestampMaxSkew: \"10\",\n\t\ttimestampPrecisionInMilliseconds: \"100\",\n\t\tsignatureCrypto: {\n\t\t\t\ttype: \"jks\", //keystore type\n\t\t\t\tfile: \"client.jks\", //keystore file relative to resource folder\n\t\t\t\tpassword: \"client\", //keystore password\n\t\t\t\tenableCryptoCaching: true,\n\t\t\t\tcacheRefreshInterval: 3000\n\t\t},\n\t\tencryptionCrypto: {\n\t\t\t\ttype: \"jks\",\n\t\t\t\tfile: \"client.jks\",\n\t\t\t\tpassword: \"client\",\n\t\t\t\tenableCryptoCaching: true,\n\t\t\t\tcacheRefreshInterval: 3000\n\t\t},\n\t\tdecryptionCrypto: {\n\t\t\t\ttype: \"jks\",\n\t\t\t\tfile: \"client.jks\",\n\t\t\t\tpassword: \"client\"\n\t\t},\n\t\tstsCrypto: {\n\t\t\t\ttype: \"jks\",\n\t\t\t\tfile: \"client.jks\",\n\t\t\t\tpassword: \"client\"\n\t\t},\n\t\tkerberosConfig: {\n\t\t\t\t/**\n\t\t\t\t\t\t\"key\" : \"value\" properties, you can also use ${resources.dir}\n\t\t\t\t\t\tin property values\n\t\t\t\t */\n\t\t\t\t\"client.principal.name\": \"client\",\n\t\t\t\t\"client.principal.password\": \"client\",\n\t\t\t\t\"service.principal.name\": \"service\",\n\t\t\t\t\"java.security.auth.login.config\": \"jassconfig\",\n\t\t\t\t\"javax.security.auth.useSubjectCredsOnly\": \"true\",\n\t\t\t\t\"kdc.des.aes.factor\": \"4\",\n\t\t\t\t\"java.security.krb5.conf\": \"/home/ruchira/wso2/conf\"\n\t\t}\n}</pre> </li> <li>policy - This property is used to specify a custome policy. An XML object should be assigned. You can use ${resources.dir} in keystore paths and Kerberos configurations to get the path of the resources directory. i.e. When you specify a path to a keystore in your resources directory, you can use this. Then it will be replaced with the correct path at the server. </li> <li>HTTPHeaders - Used to specify custom HTTP headers to be send with the request. This should be an array of elements. The value for this property should be in the following format. Both name and value properties should be Strings. <pre class=\"prettyprint\"><span class=\"pln\">options</span><span class=\"pun\">[</span><span class=\"str\">\"HTTPHeaders\"</span><span class=\"pun\">]</span><span class=\"pln\"> </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">[</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\"> name </span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"str\">\"HEADER1\"</span><span class=\"pun\">,</span><span class=\"pln\"> value </span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"str\">\"VALUE1\"</span><span class=\"pun\">},</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\"> name </span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"str\">\"HEADER2\"</span><span class=\"pun\">,</span><span class=\"pln\"> value </span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"str\">\"VALUE2\"</span><span class=\"pun\">},</span><span class=\"pln\"> </span><span class=\"pun\">.....];</span><span class=\"pln\"> </span></pre> </li> <li> SOAPHeaders - Used to specify custom SOAP headers to be send along with the SOAP message. This should be an array of elements. You can specify a header as an XML object or just as an object in the following structure. valueObject could be either a String or an XML object <pre class=\"prettyprint\"><span class=\"pln\">options</span><span class=\"pun\">[</span><span class=\"str\">\"HTTPHeaders\"</span><span class=\"pun\">]</span><span class=\"pln\"> </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">[</span><span class=\"pln\"> </span><span class=\"pun\">&lt;</span><span class=\"typ\">MyHeader1</span><span class=\"pln\"> xmlns</span><span class=\"pun\">=</span><span class=\"str\">\"http://example.com\"</span><span class=\"pun\">&gt;</span><span class=\"pln\">headerValue</span><span class=\"pun\">&lt;</span><span class=\"str\">/MyHeader1&gt;, ................................... {qName : new QName(\"http:/</span><span class=\"pun\">/</span><span class=\"pln\">example</span><span class=\"pun\">.</span><span class=\"pln\">com</span><span class=\"str\">\", \"</span><span class=\"typ\">MyHeader2</span><span class=\"str\">\"), value : valueObject}, ................................... ]; </span></pre> </li> </ul> <ul> <li><em>httpMethod</em>(String): the httpMethod to be used when the operation is invoked. </li> <li><em>url</em>(String): a URL representing where to send the message. <br><br> </li> <li> <em>async</em> (boolean): a Boolean flag representing whether the operation should be invoked asynchrounously or not. Defaults to true. </li> <li>username - This will be used as the username to invoke the service with HTTP Basic Authentication enabled. </li> <li>password - This will be used as the password to invoke the service with HTTP Basic Authentication enabled. </li> </ul> To be specific here are the various ways which the open fucntion can be used in <br><br> <ul> <li>open(httpMethod, url, async);</li> <li>open(options, url, async);</li> <li>open(httpMethod, url, username);</li> <li>open(options, url, username);</li> <li>open(httpMethod, url, username, password);</li> <li>open(options, url, username, password);</li> <li>open(httpMethod, url, async, username);</li> <li>open(options, url, async, username); </li> </ul> "
				}, {
					"Operation": "send ( XML payload | XMLString payload )",
					"Returns": "None",
					"Description": "This method invokes the Web service with the requested payload. To be used when the WSRequest object was configured using the open method. <br><br> <ul> <li><em>payload</em>: an XML object or a String containing the XML source for the request. </li> </ul> "
				}, {
					"Operation": "openWSDL ( String wsdlURL, Boolean async, [Object options,[QName serviceName, [String endpointName]]]) ",
					"Returns": "None",
					"Description": "This method can be used to invoke a external web service which advertices a WSDL. Using this method had many advantages over using the open method. <br><br> <ol type=\"1\"> <li>The user does not need to know how to frame the request. i.e. Whcih SOAP version to use? What should be the request be sent to? How do I configure WS-Security? and so on </li> <li>Can be used to invoke services that are secured using WS-Security </li> </ol> This method acceps the following parameters <br><br> <ul> <li> <span style=\"font-style: italic;\">wsdlURL</span> (String) - The url at which the WSDL is available at. Currently supports WSDL 1.1 </li> <li> <em>async</em> (boolean): A Boolean flag representing whether the operation should be invoked asynchrounously or not. </li> <li><em>options (array)</em>: An array of options needed to parse in information to invoke secured services. </li> </ul> <div>The following is a list of supported options <br><br> </div> <ul> <li>username - Used to specify the username if the service needs a username token to carry out any WS-Security related operations. </li> <li>password - Used to specify the password if the service needs a password token to carry out any WS-Security related operations. </li> <li>encryptionUser - Used to specify the alias of the certificate to use in Encryption if the service needs the request to be encrypted. </li> <li>mep - Allows you to control the Message Exchange Pattern for an invocation. Supported values are in-only (need to send a request and do not care about the response) and in-out (request - response). Defaults to in-out. </li> </ul> <ul> <li> <span style=\"font-style: italic;\">serviceName (QName) </span> - The QName of the service to be invoked. Could be usefull if the WSDL has multiple services. If not specified the ffirst service in the WSDL is used. </li> <li> <span style=\"font-style: italic;\">endpointName (String) </span> - The name of the endpoint to use wehn invoking the service. Could be usefull if the service has multiple endpoints and you prefer to use a particular one. If not specified the first SOAP endpoint is used. </li> </ul> "
				}, {
					"Operation": "send ( String operationName | QName operationName, XML payload | XMLString payload ) ",
					"Returns": "None",
					"Description": "This method invokes the specified operation of the Web service with the requested payload. To be used when the WSRequest object was configured using the openWSDL method. <br><br> <ul> <li><span style=\"font-style: italic;\">operationName (String</span>) - The name of the operation to be invoked <em></em> </li> <li> <em>payload</em> : an XML object or a String containing the XML source for the request. </li> </ul> "
				}
			]
		}
	]
}