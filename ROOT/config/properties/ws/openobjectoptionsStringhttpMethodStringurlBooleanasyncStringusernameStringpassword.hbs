<p>
	This method prepares the WSRequest object to invoke a Web service. It accepts the following parameters:
</p>
<ul>
	<li>
		options (array): an array of options for formulating the message. These options correspond to the message framing required by the service as documented in the service's WSDL and/or documentation.
	</li>
</ul>

<p>
	The following is a list of supported options
</p>

<ul>
	<li>
		useSOAP - Specify the SOAP version to be used or whether not to use SOAP. Supported values are "1.1" | "1.2" | "false"
	</li>
	<li>
		HTTPMethod - The HTTP method to be used. Supported values are "GET" | "POST" | "PUT" | "DELETE"
	</li>
	<li>
		useWSA - Weather WS-Addressing needs to be used. Supported values are "1.0" | "submission" | "true". If the version of WS-Addressing is specified and useWSA is set to true the "1.0" version is used.
	</li>
</ul>
    
<p>
	When WS-Addressing is been used the following options will also be processed
</p>

<ul>
   <li> action - Will be used as the wsa:to value. Can be used to specify to address that the message will be sent to.</li>
    <li>from - Will be used as the wsa:from value. Can be used to specify the address the request was sent from.</li>
    <li>replyTo - Will be used as the wsa:replyTo value. Can be used to specify the address the response should be sent to.</li>
    <li>faultTo - Will be used as the wsa:faultTo value. Can be used to specify the address a fault should be sent to.</li>
    <li>action - If useWSA is false will be used as the SOAPAction.</li>
    <li>mep - Allows you to control the Message Exchange Pattern for an invocation. Supported values are in-only (need to send a request and do not care about the response) and in-out (request - response). Defaults to in-out.</li>
    <li>username - This will be used as the username to invoke the service with HTTP Basic Authentication enabled.</li>
    <li>password - This will be used as the password to invoke the service with HTTP Basic Authentication enabled.</li>
    <li>HTTPLocation - Used to specify the URL pattern of the operation been invoked. Refer http://wso2.org/library/3715 for details.</li>
    <li>HTTPLocationIgnoreUncited - Specifies weather parameters not cited in the HTTPLocation should be ignored.</li>
    <li>HTTPQueryParameterSeparator - Specifies the query parameter seperator to be used. Defaults to &.</li>
    <li>HTTPInputSerialization - Specifies the message format of the request. The Mashup Server can be extended to support custom serialization. The following are supported by this distribution. application/x-www-form-urlencoded, multipart/form-data, application/json, application/json/badgerfish, application/soap+xml, text/xml, application/xml</li>
    <li>HTTPContentEncoding - Used to speficy the content-encoding of the request. Supported values are "gzip" | "compress"</li>
    <li>rampart - This property is used to specify rampart configurations for to be used with the service policies. The object pointed by "rampart" key should be in the following format.


<pre class="prettyprint">
{
    user: "admin", //username for to use UT and other scenarios
    userPassword: "admin", //in UT, this is the user password, else private key
    keyPassword: "client",
    userCertAlias: "client",
    stsAlias: "sts",
    encryptionUser: "server",
    timestampTTL: "10000",
    timestampMaxSkew: "10",
    timestampPrecisionInMilliseconds: "100",
    signatureCrypto: {
        type: "jks", //keystore type
        file: "client.jks", //keystore file relative to resource folder
        password: "client", //keystore password
        enableCryptoCaching: true,
        cacheRefreshInterval: 3000
    },
    encryptionCrypto: {
        type: "jks",
        file: "client.jks",
        password: "client",
        enableCryptoCaching: true,
        cacheRefreshInterval: 3000
    },
    decryptionCrypto: {
        type: "jks",
        file: "client.jks",
        password: "client"
    },
    stsCrypto: {
        type: "jks",
        file: "client.jks",
        password: "client"
    },
    kerberosConfig: {
        /**
		 * "key" : "value" properties, you can also use ${resources.dir}
		 * in property values
		 */
        "client.principal.name": "client",
        "client.principal.password": "client",
        "service.principal.name": "service",
        "java.security.auth.login.config": "jassconfig",
        "javax.security.auth.useSubjectCredsOnly": "true",
        "kdc.des.aes.factor": "4",
        "java.security.krb5.conf": "/home/ruchira/wso2/conf"
    }
}
</pre>
</li>

   <li>policy - This property is used to specify a custome policy. An XML object should be assigned. You can use ${resources.dir} in keystore paths and Kerberos configurations to get the path of the resources directory. i.e. When you specify a path to a keystore in your resources directory, you can use this. Then it will be replaced with the correct path at the server.
    <li>HTTPHeaders - Used to specify custom HTTP headers to be send with the request. This should be an array of elements. The value for this property should be in the following format. Both name and value properties should be Strings.

   <pre class="prettyprint">
options["HTTPHeaders"] = [
	{ name : "HEADER1", value : "VALUE1"},
	{ name : "HEADER2", value : "VALUE2"},
	...
];</pre>
	</li> 

   <li>SOAPHeaders - Used to specify custom SOAP headers to be send along with the SOAP message. This should be an array of elements. You can specify a header as an XML object or just as an object in the following structure. valueObject could be either a String or an XML object

     <pre class="prettyprint">
options["HTTPHeaders"] = [ 
	&lt;MyHeader1 xmlns="http://example.com"&gt;headerValue&lt;/MyHeader1&gt;,
	...
	{qName : new QName("http://example.com", "MyHeader2"), value : valueObject},
	...
];
</pre></li> 

   <li> httpMethod(String): the httpMethod to be used when the operation is invoked.</li>
   <li> url(String): a URL representing where to send the message.</li>

   <li> async (boolean): a Boolean flag representing whether the operation should be invoked asynchrounously or not. Defaults to true.</li>
   <li> username - This will be used as the username to invoke the service with HTTP Basic Authentication enabled.</li>
  <li>  password - This will be used as the password to invoke the service with HTTP Basic Authentication enabled.</li>
</ul>

<p>
	To be specific here are the various ways which the open fucntion can be used in
</p>
<ul>
	<li>
		open(httpMethod, url, async);
	</li>
	<li>
		open(options, url, async);
	</li>
	<li>
		open(httpMethod, url, username);
	</li>
	<li>
		open(options, url, username);
	</li>
	<li>
		open(httpMethod, url, username, password);
	</li>
	<li>
		open(options, url, username, password);
	</li>
	<li>
		open(httpMethod, url, async, username);
	</li>
	<li>
		open(options, url, async, username);
	</li>
</ul>